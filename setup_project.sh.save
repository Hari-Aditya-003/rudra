#!/usr/bin/env bash
set -euo pipefail

ROOT="$(pwd)"
echo "Working dir: $ROOT"
test -f package.json || { echo "❌ No package.json here. cd into your Next.js project root first."; exit 1; }

# 0) Clean minor pitfalls
rm -f "$HOME/package-lock.json" || true   # removes the extra lockfile causing Turbopack root warning
mkdir -p prisma public/locales/en public/locales/hi public/locales/te \
  src/app/api/events src/app/api/contact src/app/(marketing) \
  src/app/events src/app/blocks src/app/dashboard src/components src/lib src/styles

# 1) next.config.mjs (fix turbopack root warning)
cat > next.config.mjs <<'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {
  turbopack: { root: __dirname },
  headers: async () => [
    {
      source: "/(.*)",
      headers: [
        { key: "Strict-Transport-Security", value: "max-age=63072000; includeSubDomains; preload" },
        { key: "X-Content-Type-Options", value: "nosniff" },
        { key: "X-Frame-Options", value: "SAMEORIGIN" }
      ]
    }
  ]
};
export default nextConfig;
EOF

# 2) Tailwind global
cat > src/styles/globals.css <<'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body { height: 100%; }
body { background: #f8fafc; }
EOF

# 3) Basic layout + header/footer
cat > src/components/Header.tsx <<'EOF'
export default function Header(){
  return (
    <header className="bg-white shadow-sm sticky top-0 z-40">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-3 flex items-center justify-between">
        <a href="/" className="flex items-center gap-3">
          <div className="leading-tight">
            <div className="text-sky-600 font-semibold uppercase tracking-wider text-xs">THE CITY OF</div>
            <div className="text-slate-900 font-extrabold text-xl">SAN DIEGO</div>
          </div>
        </a>
        <nav className="hidden sm:flex gap-6 text-sm font-medium text-slate-700">
          <a href="/events" className="hover:text-sky-700">Events</a>
          <a href="/blocks" className="hover:text-sky-700">Blocks</a>
          <a href="/dashboard" className="hover:text-sky-700">Dashboard</a>
        </nav>
      </div>
    </header>
  );
}
EOF

cat > src/components/Footer.tsx <<'EOF'
export default function Footer(){
  return (
    <footer className="text-center text-xs text-slate-500 py-6">
      © {new Date().getFullYear()} RUDRA — Built with Next.js & Tailwind
    </footer>
  );
}
EOF

cat > src/components/LanguageSwitcher.tsx <<'EOF'
"use client";
import { useState } from "react";
export default function LanguageSwitcher(){
  const [lang, setLang] = useState("en");
  return (
    <select
      value={lang}
      onChange={(e)=>setLang(e.target.value)}
      className="border rounded px-2 py-1 text-sm"
      aria-label="Language"
    >
      <option value="en">English</option>
      <option value="hi">हिंदी</option>
      <option value="te">తెలుగు</option>
    </select>
  );
}
EOF

cat > src/app/layout.tsx <<'EOF'
import "./globals.css";
import Header from "@/components/Header";
import Footer from "@/components/Footer";

export const metadata = { title: "RUDRA", description: "City-style site" };

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body className="bg-slate-50 antialiased">
        <Header />
        {children}
        <Footer />
      </body>
    </html>
  );
}
EOF

cat > src/app/(marketing)/page.tsx <<'EOF'
import LanguageSwitcher from "@/components/LanguageSwitcher";

export default function HomePage(){
  return (
    <main className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-10">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-extrabold">Welcome</h1>
        <LanguageSwitcher />
      </div>
      <p className="mt-4 text-slate-700">Your starter homepage. Use the nav to explore.</p>
      <div className="mt-8 aspect-video w-full max-w-3xl">
        <iframe
          className="w-full h-full rounded"
          src="https://www.youtube.com/embed/dQw4w9WgXcQ"
          title="Sample"
          allowFullScreen
        />
      </div>
    </main>
  );
}
EOF

# 4) Prisma: schema + helper + seed + config
cat > prisma/schema.prisma <<'EOF'
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  messages  Message[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  startsAt    DateTime @default(now())
  endsAt      DateTime?
  mediaUrl    String?
  youtubeId   String?
  published   Boolean  @default(false)
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  fromEmail String
  fromName  String?
  body      String
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
}

enum Role {
  USER
  ADMIN
}
EOF

# Prisma config (removes deprecation notice)
cat > prisma.config.ts <<'EOF'
import type { Config } from "@prisma/internals";
export default {
  seeds: { run: "ts-node --esm prisma/seed.ts" },
} satisfies Config;
EOF

cat > prisma/seed.ts <<'EOF'
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

async function main() {
  const admin = await prisma.user.upsert({
    where: { email: "admin@example.com" },
    update: { role: "ADMIN" },
    create: { email: "admin@example.com", name: "Admin", role: "ADMIN" },
  });

  await prisma.event.create({
    data: {
      title: "Launch Day",
      description: "We are going live soon!",
      ownerId: admin.id,
      published: true,
      startsAt: new Date(),
      endsAt: new Date(Date.now() + 2 * 60 * 60 * 1000),
      youtubeId: "dQw4w9WgXcQ",
    },
  });
}

main().then(()=>prisma.$disconnect()).catch(async e=>{console.error(e);await prisma.$disconnect();process.exit(1);});
EOF

cat > src/lib/db.ts <<'EOF'
import { PrismaClient } from "@prisma/client";
const g = global as unknown as { prisma?: PrismaClient };
export const prisma = g.prisma ?? new PrismaClient({ log: ["error","warn"] });
if (process.env.NODE_ENV !== "production") g.prisma = prisma;
EOF

# 5) API routes: events (GET+POST) and contact (POST)
cat > src/app/api/events/route.ts <<'EOF'
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function GET() {
  const events = await prisma.event.findMany({
    where: { published: true },
    orderBy: { startsAt: "desc" }
  });
  return NextResponse.json(events);
}

export async function POST(req: NextRequest) {
  const body = await req.json();
  const { title, description, startsAt, endsAt, youtubeId, published = false, ownerEmail = "admin@example.com" } = body;

  if (!title || !description) {
    return NextResponse.json({ error: "Missing title/description" }, { status: 400 });
  }

  const owner = await prisma.user.upsert({
    where: { email: ownerEmail },
    update: {},
    create: { email: ownerEmail, name: "Owner" }
  });

  const event = await prisma.event.create({
    data: {
      title,
      description,
      startsAt: startsAt ? new Date(startsAt) : new Date(),
      endsAt: endsAt ? new Date(endsAt) : null,
      youtubeId,
      published,
      ownerId: owner.id
    }
  });

  return NextResponse.json(event, { status: 201 });
}
EOF

cat > src/app/api/contact/route.ts <<'EOF'
import { NextResponse } from "next/server";
import { prisma } from "@/lib/db";

export async function POST(req: Request) {
  const { name, email, message } = await req.json();
  if (!email || !message) return NextResponse.json({ error: "Invalid" }, { status: 400 });

  await prisma.message.create({ data: { fromEmail: email, fromName: name, body: message }});
  // TODO: wire to SendGrid/SES
  return NextResponse.json({ ok: true });
}
EOF

# 6) Pages: events/blocks/dashboard
cat > src/app/events/page.tsx <<'EOF'
export default async function EventsPage() {
  const base = process.env.NEXT_PUBLIC_SITE_URL ?? "http://localhost:3000";
  const res = await fetch(`${base}/api/events`, { cache: "no-store" });
  const events = await res.json();

  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">Upcoming Events</h1>
      {!events.length ? (
        <p className="text-slate-600">No events yet.</p>
      ) : (
        <ul className="space-y-6">
          {events.map((event: any) => (
            <li key={event.id} className="p-6 border rounded-lg bg-white shadow">
              <h2 className="text-2xl font-semibold">{event.title}</h2>
              <p className="text-gray-700 mt-2">{event.description}</p>
              <p className="text-sm text-gray-500 mt-1">
                {new Date(event.startsAt).toLocaleString()}
                {event.endsAt ? ` → ${new Date(event.endsAt).toLocaleString()}` : ""}
              </p>
              {event.youtubeId && (
                <iframe
                  className="mt-4 w-full h-64 rounded-lg"
                  src={`https://www.youtube.com/embed/${event.youtubeId}`}
                  title={event.title}
                  allowFullScreen
                />
              )}
            </li>
          ))}
        </ul>
      )}
    </main>
  );
}
EOF

cat > src/app/blocks/page.tsx <<'EOF'
export default function BlocksPage(){
  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Blocks</h1>
      <p className="text-slate-700">Coming soon: dynamic content blocks with admin editing.</p>
    </main>
  );
}
EOF

cat > src/app/dashboard/page.tsx <<'EOF'
"use client";
import { useState } from "react";

export default function Dashboard(){
  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState("");

  async function createEvent(form: FormData) {
    setLoading(true); setMsg("");
    const res = await fetch("/api/events", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        title: form.get("title"),
        description: form.get("description"),
        startsAt: form.get("startsAt"),
        endsAt: form.get("endsAt") || null,
        youtubeId: form.get("youtubeId") || null,
        published: form.get("published") === "on"
      })
    });
    const data = await res.json();
    setLoading(false);
    setMsg(res.ok ? `Created: ${data.title}` : `Error: ${data.error || "failed"}`);
  }

  return (
    <main className="max-w-2xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Admin Dashboard (demo)</h1>
      <form action={async (fd) => createEvent(fd)} className="space-y-3 bg-white p-4 rounded shadow">
        <input name="title" placeholder="Title" required className="w-full border rounded px-3 py-2"/>
        <textarea name="description" placeholder="Description" required className="w-full border rounded px-3 py-2"/>
        <input type="datetime-local" name="startsAt" className="w-full border rounded px-3 py-2"/>
        <input type="datetime-local" name="endsAt" className="w-full border rounded px-3 py-2"/>
        <input name="youtubeId" placeholder="YouTube Video ID (optional)" className="w-full border rounded px-3 py-2"/>
        <label className="flex items-center gap-2 text-sm">
          <input type="checkbox" name="published" /> Published
        </label>
        <button disabled={loading} className="bg-sky-600 text-white rounded px-4 py-2">
          {loading ? "Saving..." : "Create Event"}
        </button>
      </form>
      {msg && <p className="mt-3 text-sm">{msg}</p>}
    </main>
  );
}
EOF

# 7) i18n placeholders
cat > public/locales/en/common.json <<'EOF'
{ "hello": "Hello", "connect": "CONNECT with the City" }
EOF
cat > public/locales/hi/common.json <<'EOF'
{ "hello": "नमस्ते", "connect": "शहर से जुड़ें" }
EOF
cat > public/locales/te/common.json <<'EOF'
{ "hello": "నమస్తే", "connect": "సిటీతో కనెక్ట్ అవ్వండి" }
EOF

# 8) .env.example
cat > .env.example <<'EOF'
DATABASE_URL="postgresql://rudra_user:STRONGPASS@localhost:5432/rudra_db?schema=public"
NEXT_PUBLIC_SITE_URL="http://localhost:3000"

# Firebase (fill later)
NEXT_PUBLIC_FIREBASE_API_KEY=""
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=""
NEXT_PUBLIC_FIREBASE_PROJECT_ID=""
NEXT_PUBLIC_FIREBASE_APP_ID=""
FIREBASE_SERVICE_ACCOUNT_JSON="{}"

# Email provider (fill later)
SENDGRID_API_KEY=""

# Pusher (fill later)
PUSHER_APP_ID=""
PUSHER_KEY=""
PUSHER_SECRET=""
PUSHER_CLUSTER="ap2"
EOF

# 9) package.json tweaks: postinstall + seed script
# (we avoid editing other fields)
if command -v jq >/dev/null 2>&1; then
  tmp=$(mktemp)
  jq '.scripts += {"postinstall":"prisma generate","seed":"prisma db seed"}' package.json > "$tmp" && mv "$tmp" package.json
else
  echo '⚠️ jq not installed; please ensure package.json has "postinstall": "prisma generate" and "seed": "prisma db seed" inside "scripts".'
fi

echo "✅ Project files created/updated."
echo "Next:"
echo "  1) Set DATABASE_URL in .env (if not already)."
echo "  2) Run: npx prisma migrate dev --name init_models"
echo "  3) Run: npx prisma db seed"
echo "  4) Run: npm run dev  → http://localhost:3000"
