// -----------------------------------------
// Prisma Schema for Rudra (Next.js + PostgreSQL)
// -----------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // âœ… Must be a valid Postgres connection string
}

// -----------------------------------------
// ENUMS
// -----------------------------------------
enum Role {
  USER
  ADMIN
}

// -----------------------------------------
// MODELS
// -----------------------------------------

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  phone        String?
  description  String    @default("")   // avoids null issues
  place        String    @default("")   // avoids null issues
  role         Role      @default(USER)
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  events       Event[]
  messages     Message[]
  blogs        Blog[]

  @@map("users")
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  content     String    @default("")
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  events      Event[]

  @@map("blogs")
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String    @default("")
  startsAt    DateTime  @default(now())
  endsAt      DateTime?
  mediaUrl    String?
  youtubeId   String?
  published   Boolean   @default(true)

  ownerId     String
  blogId      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  blog        Blog?     @relation(fields: [blogId], references: [id], onDelete: SetNull)

  @@map("events")
}

model Message {
  id          String    @id @default(cuid())
  fromEmail   String
  fromName    String?
  body        String
  userId      String?
  createdAt   DateTime  @default(now())

  // Relations
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("messages")
}
